#include <stdlib.h>

#include "matrix.h"
#include "limits.h"

void matrix_chain_aux(int *P, int **M, int **S, int i, int j)
{
	M[i-1][j-1] = INT_MAX;

	for(int k=i; k<=j-1; k++)
	{
		int q = M[i-1][k-1] + M[k+1-1][j-1] + P[i-1]*P[k]*P[j];
		if(q < M[i-1][j-1])
		{
			M[i-1][j-1] = q;
			S[i-1][j-2] = k;
		}
	}
}

void matrix_chain(int **S, int **M, int *P, int n)
{

	for(int i=1; i<=n; i++)
	{
		M[i-1][i-1]=0;
	}

	for(int l=2; l<=n; l++)
	{
		for(int i=1; i<=(n-l+1); i++)
		{
			int j = i + l - 1;
			matrix_chain_aux(P,M,S,i,j);
		}
	}
}



#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "matrix.h"
#include "chain_matrix_multiplication.h"

void show_matrix(int **M, int n)
{
  for(int i = 0;i<n;i++)
  {
    for(int j = 0;j<n;j++)
    {
        printf("%d, ", M[i][j]);
    }
        printf("\n");
  }
};

int main(int argc, char *argv[]) {

  unsigned int n = 4;
  int **M=allocate_int_matrix(n,n);
  int **S=allocate_int_matrix(n-1,n-1);
  int dimensions[5] = {3,5,10,2,3};

  matrix_chain(S, M, dimensions, n);// 4!
  show_matrix(M, n);
  printf("\n");
  show_matrix(S, n-1);

  deallocate_int_matrix(M,n);
  deallocate_int_matrix(S,n-1);



  return 0;
}
